
Stm32CANFD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000200c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080021e4  080021e4  000031e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021f4  080021f4  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080021f4  080021f4  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080021f4  080021f4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021f4  080021f4  000031f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080021f8  080021f8  000031f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080021fc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002208  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002208  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c5e  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016df  00000000  00000000  0000bc9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  0000d380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000064c  00000000  00000000  0000dc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001beb5  00000000  00000000  0000e24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008889  00000000  00000000  0002a101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1a97  00000000  00000000  0003298a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4421  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021b4  00000000  00000000  000e4464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e6618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080021cc 	.word	0x080021cc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080021cc 	.word	0x080021cc

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 f9b5 	bl	800058a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f806 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f898 	bl	8000358 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000228:	f000 f84e 	bl	80002c8 <MX_FDCAN1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800022c:	bf00      	nop
 800022e:	e7fd      	b.n	800022c <main+0x14>

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b094      	sub	sp, #80	@ 0x50
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	2238      	movs	r2, #56	@ 0x38
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f001 ff98 	bl	8002174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000252:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000256:	f000 fff3 	bl	8001240 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025a:	2302      	movs	r3, #2
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000262:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000264:	2340      	movs	r3, #64	@ 0x40
 8000266:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000268:	2302      	movs	r3, #2
 800026a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800026c:	2302      	movs	r3, #2
 800026e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000270:	2301      	movs	r3, #1
 8000272:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000274:	2308      	movs	r3, #8
 8000276:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000278:	2302      	movs	r3, #2
 800027a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800027c:	2302      	movs	r3, #2
 800027e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000280:	2302      	movs	r3, #2
 8000282:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0318 	add.w	r3, r7, #24
 8000288:	4618      	mov	r0, r3
 800028a:	f001 f88d 	bl	80013a8 <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000294:	f000 f878 	bl	8000388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029c:	2303      	movs	r3, #3
 800029e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2102      	movs	r1, #2
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fb8b 	bl	80019cc <HAL_RCC_ClockConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002bc:	f000 f864 	bl	8000388 <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3750      	adds	r7, #80	@ 0x50
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80002cc:	4b20      	ldr	r3, [pc, #128]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 80002ce:	4a21      	ldr	r2, [pc, #132]	@ (8000354 <MX_FDCAN1_Init+0x8c>)
 80002d0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80002d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80002d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 80002da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002de:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 80002e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 80002e2:	2204      	movs	r2, #4
 80002e4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80002ec:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80002f2:	4b17      	ldr	r3, [pc, #92]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80002f8:	4b15      	ldr	r3, [pc, #84]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 80002fe:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 8000300:	2210      	movs	r2, #16
 8000302:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 100;
 8000304:	4b12      	ldr	r3, [pc, #72]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 8000306:	2264      	movs	r2, #100	@ 0x64
 8000308:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 27;
 800030a:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 800030c:	221b      	movs	r2, #27
 800030e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000310:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 8000312:	2201      	movs	r2, #1
 8000314:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 16;
 8000316:	4b0e      	ldr	r3, [pc, #56]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 8000318:	2210      	movs	r2, #16
 800031a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800031c:	4b0c      	ldr	r3, [pc, #48]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 800031e:	2201      	movs	r2, #1
 8000320:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000322:	4b0b      	ldr	r3, [pc, #44]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 8000324:	2201      	movs	r2, #1
 8000326:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000328:	4b09      	ldr	r3, [pc, #36]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 800032a:	2201      	movs	r2, #1
 800032c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800032e:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 8000330:	2200      	movs	r2, #0
 8000332:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000334:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 8000336:	2200      	movs	r2, #0
 8000338:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800033a:	4805      	ldr	r0, [pc, #20]	@ (8000350 <MX_FDCAN1_Init+0x88>)
 800033c:	f000 faa6 	bl	800088c <HAL_FDCAN_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000346:	f000 f81f 	bl	8000388 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000028 	.word	0x20000028
 8000354:	40006400 	.word	0x40006400

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035e:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <MX_GPIO_Init+0x2c>)
 8000360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000362:	4a08      	ldr	r2, [pc, #32]	@ (8000384 <MX_GPIO_Init+0x2c>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800036a:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <MX_GPIO_Init+0x2c>)
 800036c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000

08000388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038c:	b672      	cpsid	i
}
 800038e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000390:	bf00      	nop
 8000392:	e7fd      	b.n	8000390 <Error_Handler+0x8>

08000394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800039a:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <HAL_MspInit+0x44>)
 800039c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800039e:	4a0e      	ldr	r2, [pc, #56]	@ (80003d8 <HAL_MspInit+0x44>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80003a6:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <HAL_MspInit+0x44>)
 80003a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b2:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <HAL_MspInit+0x44>)
 80003b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003b6:	4a08      	ldr	r2, [pc, #32]	@ (80003d8 <HAL_MspInit+0x44>)
 80003b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80003be:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <HAL_MspInit+0x44>)
 80003c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003c6:	603b      	str	r3, [r7, #0]
 80003c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80003ca:	f000 ffdd 	bl	8001388 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000

080003dc <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b09a      	sub	sp, #104	@ 0x68
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]
 80003f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f4:	f107 0310 	add.w	r3, r7, #16
 80003f8:	2244      	movs	r2, #68	@ 0x44
 80003fa:	2100      	movs	r1, #0
 80003fc:	4618      	mov	r0, r3
 80003fe:	f001 feb9 	bl	8002174 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a24      	ldr	r2, [pc, #144]	@ (8000498 <HAL_FDCAN_MspInit+0xbc>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d141      	bne.n	8000490 <HAL_FDCAN_MspInit+0xb4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800040c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000410:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000412:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000416:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000418:	f107 0310 	add.w	r3, r7, #16
 800041c:	4618      	mov	r0, r3
 800041e:	f001 fcb9 	bl	8001d94 <HAL_RCCEx_PeriphCLKConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000428:	f7ff ffae 	bl	8000388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800042c:	4b1b      	ldr	r3, [pc, #108]	@ (800049c <HAL_FDCAN_MspInit+0xc0>)
 800042e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000430:	4a1a      	ldr	r2, [pc, #104]	@ (800049c <HAL_FDCAN_MspInit+0xc0>)
 8000432:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000436:	6593      	str	r3, [r2, #88]	@ 0x58
 8000438:	4b18      	ldr	r3, [pc, #96]	@ (800049c <HAL_FDCAN_MspInit+0xc0>)
 800043a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800043c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000444:	4b15      	ldr	r3, [pc, #84]	@ (800049c <HAL_FDCAN_MspInit+0xc0>)
 8000446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000448:	4a14      	ldr	r2, [pc, #80]	@ (800049c <HAL_FDCAN_MspInit+0xc0>)
 800044a:	f043 0301 	orr.w	r3, r3, #1
 800044e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000450:	4b12      	ldr	r3, [pc, #72]	@ (800049c <HAL_FDCAN_MspInit+0xc0>)
 8000452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000454:	f003 0301 	and.w	r3, r3, #1
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800045c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000460:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000462:	2302      	movs	r3, #2
 8000464:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046a:	2300      	movs	r3, #0
 800046c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800046e:	2309      	movs	r3, #9
 8000470:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000472:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000476:	4619      	mov	r1, r3
 8000478:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800047c:	f000 fd5e 	bl	8000f3c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000480:	2200      	movs	r2, #0
 8000482:	2100      	movs	r1, #0
 8000484:	2015      	movs	r0, #21
 8000486:	f000 f9cc 	bl	8000822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800048a:	2015      	movs	r0, #21
 800048c:	f000 f9e3 	bl	8000856 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000490:	bf00      	nop
 8000492:	3768      	adds	r7, #104	@ 0x68
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40006400 	.word	0x40006400
 800049c:	40021000 	.word	0x40021000

080004a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <NMI_Handler+0x4>

080004a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <HardFault_Handler+0x4>

080004b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <MemManage_Handler+0x4>

080004b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <BusFault_Handler+0x4>

080004c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <UsageFault_Handler+0x4>

080004c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f6:	f000 f89b 	bl	8000630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000504:	4802      	ldr	r0, [pc, #8]	@ (8000510 <FDCAN1_IT0_IRQHandler+0x10>)
 8000506:	f000 fb1b 	bl	8000b40 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000028 	.word	0x20000028

08000514 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <SystemInit+0x20>)
 800051a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800051e:	4a05      	ldr	r2, [pc, #20]	@ (8000534 <SystemInit+0x20>)
 8000520:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000524:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000538:	480d      	ldr	r0, [pc, #52]	@ (8000570 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800053a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800053c:	f7ff ffea 	bl	8000514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000540:	480c      	ldr	r0, [pc, #48]	@ (8000574 <LoopForever+0x6>)
  ldr r1, =_edata
 8000542:	490d      	ldr	r1, [pc, #52]	@ (8000578 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000544:	4a0d      	ldr	r2, [pc, #52]	@ (800057c <LoopForever+0xe>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000548:	e002      	b.n	8000550 <LoopCopyDataInit>

0800054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054e:	3304      	adds	r3, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000554:	d3f9      	bcc.n	800054a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000556:	4a0a      	ldr	r2, [pc, #40]	@ (8000580 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000558:	4c0a      	ldr	r4, [pc, #40]	@ (8000584 <LoopForever+0x16>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800055c:	e001      	b.n	8000562 <LoopFillZerobss>

0800055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000560:	3204      	adds	r2, #4

08000562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000564:	d3fb      	bcc.n	800055e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000566:	f001 fe0d 	bl	8002184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800056a:	f7ff fe55 	bl	8000218 <main>

0800056e <LoopForever>:

LoopForever:
    b LoopForever
 800056e:	e7fe      	b.n	800056e <LoopForever>
  ldr   r0, =_estack
 8000570:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000578:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800057c:	080021fc 	.word	0x080021fc
  ldr r2, =_sbss
 8000580:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000584:	20000090 	.word	0x20000090

08000588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000588:	e7fe      	b.n	8000588 <ADC1_2_IRQHandler>

0800058a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b082      	sub	sp, #8
 800058e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000590:	2300      	movs	r3, #0
 8000592:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000594:	2003      	movs	r0, #3
 8000596:	f000 f939 	bl	800080c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800059a:	200f      	movs	r0, #15
 800059c:	f000 f80e 	bl	80005bc <HAL_InitTick>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d002      	beq.n	80005ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005a6:	2301      	movs	r3, #1
 80005a8:	71fb      	strb	r3, [r7, #7]
 80005aa:	e001      	b.n	80005b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005ac:	f7ff fef2 	bl	8000394 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005b0:	79fb      	ldrb	r3, [r7, #7]

}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80005c8:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <HAL_InitTick+0x68>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d022      	beq.n	8000616 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005d0:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <HAL_InitTick+0x6c>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <HAL_InitTick+0x68>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80005e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f944 	bl	8000872 <HAL_SYSTICK_Config>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d10f      	bne.n	8000610 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b0f      	cmp	r3, #15
 80005f4:	d809      	bhi.n	800060a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f6:	2200      	movs	r2, #0
 80005f8:	6879      	ldr	r1, [r7, #4]
 80005fa:	f04f 30ff 	mov.w	r0, #4294967295
 80005fe:	f000 f910 	bl	8000822 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000602:	4a0a      	ldr	r2, [pc, #40]	@ (800062c <HAL_InitTick+0x70>)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	e007      	b.n	800061a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	e004      	b.n	800061a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000610:	2301      	movs	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	e001      	b.n	800061a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000616:	2301      	movs	r3, #1
 8000618:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000008 	.word	0x20000008
 8000628:	20000000 	.word	0x20000000
 800062c:	20000004 	.word	0x20000004

08000630 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000634:	4b05      	ldr	r3, [pc, #20]	@ (800064c <HAL_IncTick+0x1c>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <HAL_IncTick+0x20>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4413      	add	r3, r2
 800063e:	4a03      	ldr	r2, [pc, #12]	@ (800064c <HAL_IncTick+0x1c>)
 8000640:	6013      	str	r3, [r2, #0]
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	2000008c 	.word	0x2000008c
 8000650:	20000008 	.word	0x20000008

08000654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return uwTick;
 8000658:	4b03      	ldr	r3, [pc, #12]	@ (8000668 <HAL_GetTick+0x14>)
 800065a:	681b      	ldr	r3, [r3, #0]
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	2000008c 	.word	0x2000008c

0800066c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <__NVIC_SetPriorityGrouping+0x44>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000688:	4013      	ands	r3, r2
 800068a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000694:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800069c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069e:	4a04      	ldr	r2, [pc, #16]	@ (80006b0 <__NVIC_SetPriorityGrouping+0x44>)
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	60d3      	str	r3, [r2, #12]
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b8:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <__NVIC_GetPriorityGrouping+0x18>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	f003 0307 	and.w	r3, r3, #7
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	db0b      	blt.n	80006fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f003 021f 	and.w	r2, r3, #31
 80006e8:	4907      	ldr	r1, [pc, #28]	@ (8000708 <__NVIC_EnableIRQ+0x38>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	095b      	lsrs	r3, r3, #5
 80006f0:	2001      	movs	r0, #1
 80006f2:	fa00 f202 	lsl.w	r2, r0, r2
 80006f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000e100 	.word	0xe000e100

0800070c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071c:	2b00      	cmp	r3, #0
 800071e:	db0a      	blt.n	8000736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	490c      	ldr	r1, [pc, #48]	@ (8000758 <__NVIC_SetPriority+0x4c>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	0112      	lsls	r2, r2, #4
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	440b      	add	r3, r1
 8000730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000734:	e00a      	b.n	800074c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4908      	ldr	r1, [pc, #32]	@ (800075c <__NVIC_SetPriority+0x50>)
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	3b04      	subs	r3, #4
 8000744:	0112      	lsls	r2, r2, #4
 8000746:	b2d2      	uxtb	r2, r2
 8000748:	440b      	add	r3, r1
 800074a:	761a      	strb	r2, [r3, #24]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000e100 	.word	0xe000e100
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000760:	b480      	push	{r7}
 8000762:	b089      	sub	sp, #36	@ 0x24
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	f1c3 0307 	rsb	r3, r3, #7
 800077a:	2b04      	cmp	r3, #4
 800077c:	bf28      	it	cs
 800077e:	2304      	movcs	r3, #4
 8000780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3304      	adds	r3, #4
 8000786:	2b06      	cmp	r3, #6
 8000788:	d902      	bls.n	8000790 <NVIC_EncodePriority+0x30>
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3b03      	subs	r3, #3
 800078e:	e000      	b.n	8000792 <NVIC_EncodePriority+0x32>
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	f04f 32ff 	mov.w	r2, #4294967295
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	43da      	mvns	r2, r3
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	401a      	ands	r2, r3
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	fa01 f303 	lsl.w	r3, r1, r3
 80007b2:	43d9      	mvns	r1, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	4313      	orrs	r3, r2
         );
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3724      	adds	r7, #36	@ 0x24
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
	...

080007c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007d8:	d301      	bcc.n	80007de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007da:	2301      	movs	r3, #1
 80007dc:	e00f      	b.n	80007fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007de:	4a0a      	ldr	r2, [pc, #40]	@ (8000808 <SysTick_Config+0x40>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e6:	210f      	movs	r1, #15
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	f7ff ff8e 	bl	800070c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f0:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <SysTick_Config+0x40>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f6:	4b04      	ldr	r3, [pc, #16]	@ (8000808 <SysTick_Config+0x40>)
 80007f8:	2207      	movs	r2, #7
 80007fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	e000e010 	.word	0xe000e010

0800080c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff ff29 	bl	800066c <__NVIC_SetPriorityGrouping>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
 800082e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000830:	f7ff ff40 	bl	80006b4 <__NVIC_GetPriorityGrouping>
 8000834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	6978      	ldr	r0, [r7, #20]
 800083c:	f7ff ff90 	bl	8000760 <NVIC_EncodePriority>
 8000840:	4602      	mov	r2, r0
 8000842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff5f 	bl	800070c <__NVIC_SetPriority>
}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff33 	bl	80006d0 <__NVIC_EnableIRQ>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ffa4 	bl	80007c8 <SysTick_Config>
 8000880:	4603      	mov	r3, r0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d101      	bne.n	800089e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e147      	b.n	8000b2e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d106      	bne.n	80008b8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff fd92 	bl	80003dc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	699a      	ldr	r2, [r3, #24]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f022 0210 	bic.w	r2, r2, #16
 80008c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008c8:	f7ff fec4 	bl	8000654 <HAL_GetTick>
 80008cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80008ce:	e012      	b.n	80008f6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80008d0:	f7ff fec0 	bl	8000654 <HAL_GetTick>
 80008d4:	4602      	mov	r2, r0
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	2b0a      	cmp	r3, #10
 80008dc:	d90b      	bls.n	80008f6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008e2:	f043 0201 	orr.w	r2, r3, #1
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2203      	movs	r2, #3
 80008ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e11b      	b.n	8000b2e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	2b08      	cmp	r3, #8
 8000902:	d0e5      	beq.n	80008d0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	699a      	ldr	r2, [r3, #24]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f042 0201 	orr.w	r2, r2, #1
 8000912:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000914:	f7ff fe9e 	bl	8000654 <HAL_GetTick>
 8000918:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800091a:	e012      	b.n	8000942 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800091c:	f7ff fe9a 	bl	8000654 <HAL_GetTick>
 8000920:	4602      	mov	r2, r0
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	2b0a      	cmp	r3, #10
 8000928:	d90b      	bls.n	8000942 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092e:	f043 0201 	orr.w	r2, r3, #1
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2203      	movs	r2, #3
 800093a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e0f5      	b.n	8000b2e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0e5      	beq.n	800091c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	699a      	ldr	r2, [r3, #24]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f042 0202 	orr.w	r2, r2, #2
 800095e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a74      	ldr	r2, [pc, #464]	@ (8000b38 <HAL_FDCAN_Init+0x2ac>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d103      	bne.n	8000972 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800096a:	4a74      	ldr	r2, [pc, #464]	@ (8000b3c <HAL_FDCAN_Init+0x2b0>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7c1b      	ldrb	r3, [r3, #16]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d108      	bne.n	800098c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	699a      	ldr	r2, [r3, #24]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000988:	619a      	str	r2, [r3, #24]
 800098a:	e007      	b.n	800099c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	699a      	ldr	r2, [r3, #24]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800099a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7c5b      	ldrb	r3, [r3, #17]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d108      	bne.n	80009b6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	699a      	ldr	r2, [r3, #24]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80009b2:	619a      	str	r2, [r3, #24]
 80009b4:	e007      	b.n	80009c6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	699a      	ldr	r2, [r3, #24]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80009c4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	7c9b      	ldrb	r3, [r3, #18]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d108      	bne.n	80009e0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	699a      	ldr	r2, [r3, #24]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80009dc:	619a      	str	r2, [r3, #24]
 80009de:	e007      	b.n	80009f0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	699a      	ldr	r2, [r3, #24]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80009ee:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	430a      	orrs	r2, r1
 8000a04:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	699a      	ldr	r2, [r3, #24]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000a14:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	691a      	ldr	r2, [r3, #16]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f022 0210 	bic.w	r2, r2, #16
 8000a24:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d108      	bne.n	8000a40 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	699a      	ldr	r2, [r3, #24]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f042 0204 	orr.w	r2, r2, #4
 8000a3c:	619a      	str	r2, [r3, #24]
 8000a3e:	e02c      	b.n	8000a9a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d028      	beq.n	8000a9a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d01c      	beq.n	8000a8a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	699a      	ldr	r2, [r3, #24]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a5e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	691a      	ldr	r2, [r3, #16]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f042 0210 	orr.w	r2, r2, #16
 8000a6e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	2b03      	cmp	r3, #3
 8000a76:	d110      	bne.n	8000a9a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	699a      	ldr	r2, [r3, #24]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f042 0220 	orr.w	r2, r2, #32
 8000a86:	619a      	str	r2, [r3, #24]
 8000a88:	e007      	b.n	8000a9a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	699a      	ldr	r2, [r3, #24]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f042 0220 	orr.w	r2, r2, #32
 8000a98:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000aaa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a1b      	ldr	r3, [r3, #32]
 8000ab0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000ab2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000ac2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ac4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000ace:	d115      	bne.n	8000afc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ad4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ada:	3b01      	subs	r3, #1
 8000adc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000ade:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000ae8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000af0:	3b01      	subs	r3, #1
 8000af2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000af8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000afa:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 f9bc 	bl	8000e90 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2201      	movs	r2, #1
 8000b28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40006400 	.word	0x40006400
 8000b3c:	40006500 	.word	0x40006500

08000b40 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	@ 0x30
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b4e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b74:	4013      	ands	r3, r2
 8000b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b96:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8000b9a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ba2:	6a3a      	ldr	r2, [r7, #32]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000bae:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000bb2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bba:	69fa      	ldr	r2, [r7, #28]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bc6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000bce:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	099b      	lsrs	r3, r3, #6
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00c      	beq.n	8000bf6 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	099b      	lsrs	r3, r3, #6
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d006      	beq.n	8000bf6 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2240      	movs	r2, #64	@ 0x40
 8000bee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 f92d 	bl	8000e50 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d01a      	beq.n	8000c38 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d014      	beq.n	8000c38 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c16:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c2e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8000c30:	6939      	ldr	r1, [r7, #16]
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f000 f8ed 	bl	8000e12 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8000c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d007      	beq.n	8000c4e <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c44:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8000c46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f000 f8ac 	bl	8000da6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8000c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d007      	beq.n	8000c64 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c5a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8000c5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 f8ac 	bl	8000dbc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8000c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d007      	beq.n	8000c7a <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c70:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8000c72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f000 f8ac 	bl	8000dd2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	0a5b      	lsrs	r3, r3, #9
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00d      	beq.n	8000ca2 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	0a5b      	lsrs	r3, r3, #9
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d007      	beq.n	8000ca2 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c9a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f000 f8a3 	bl	8000de8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	09db      	lsrs	r3, r3, #7
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d019      	beq.n	8000ce2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	09db      	lsrs	r3, r3, #7
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d013      	beq.n	8000ce2 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000cc2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2280      	movs	r2, #128	@ 0x80
 8000cd8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8000cda:	68f9      	ldr	r1, [r7, #12]
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f000 f88d 	bl	8000dfc <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	0b5b      	lsrs	r3, r3, #13
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00d      	beq.n	8000d0a <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	0b5b      	lsrs	r3, r3, #13
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d007      	beq.n	8000d0a <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d02:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f000 f88f 	bl	8000e28 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	0bdb      	lsrs	r3, r3, #15
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00d      	beq.n	8000d32 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	0bdb      	lsrs	r3, r3, #15
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d007      	beq.n	8000d32 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d2a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f000 f885 	bl	8000e3c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	0b9b      	lsrs	r3, r3, #14
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d010      	beq.n	8000d60 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	0b9b      	lsrs	r3, r3, #14
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d00a      	beq.n	8000d60 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d58:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d007      	beq.n	8000d76 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	69fa      	ldr	r2, [r7, #28]
 8000d6c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8000d6e:	69f9      	ldr	r1, [r7, #28]
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f000 f881 	bl	8000e78 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8000d76:	6a3b      	ldr	r3, [r7, #32]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d009      	beq.n	8000d90 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6a3a      	ldr	r2, [r7, #32]
 8000d82:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d88:	6a3b      	ldr	r3, [r7, #32]
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d002      	beq.n	8000d9e <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f000 f863 	bl	8000e64 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8000d9e:	bf00      	nop
 8000da0:	3730      	adds	r7, #48	@ 0x30
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000e98:	4b27      	ldr	r3, [pc, #156]	@ (8000f38 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8000e9a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eaa:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eb2:	041a      	lsls	r2, r3, #16
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ed0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ed8:	061a      	lsls	r2, r3, #24
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	e005      	b.n	8000f1e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d3f3      	bcc.n	8000f12 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	4000a400 	.word	0x4000a400

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f4a:	e15a      	b.n	8001202 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	2101      	movs	r1, #1
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 814c 	beq.w	80011fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d005      	beq.n	8000f7c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d130      	bne.n	8000fde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	091b      	lsrs	r3, r3, #4
 8000fc8:	f003 0201 	and.w	r2, r3, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d017      	beq.n	800101a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d123      	bne.n	800106e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	220f      	movs	r2, #15
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	691a      	ldr	r2, [r3, #16]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	6939      	ldr	r1, [r7, #16]
 800106a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0203 	and.w	r2, r3, #3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 80a6 	beq.w	80011fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b0:	4b5b      	ldr	r3, [pc, #364]	@ (8001220 <HAL_GPIO_Init+0x2e4>)
 80010b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b4:	4a5a      	ldr	r2, [pc, #360]	@ (8001220 <HAL_GPIO_Init+0x2e4>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80010bc:	4b58      	ldr	r3, [pc, #352]	@ (8001220 <HAL_GPIO_Init+0x2e4>)
 80010be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010c8:	4a56      	ldr	r2, [pc, #344]	@ (8001224 <HAL_GPIO_Init+0x2e8>)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010f2:	d01f      	beq.n	8001134 <HAL_GPIO_Init+0x1f8>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a4c      	ldr	r2, [pc, #304]	@ (8001228 <HAL_GPIO_Init+0x2ec>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d019      	beq.n	8001130 <HAL_GPIO_Init+0x1f4>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a4b      	ldr	r2, [pc, #300]	@ (800122c <HAL_GPIO_Init+0x2f0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d013      	beq.n	800112c <HAL_GPIO_Init+0x1f0>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a4a      	ldr	r2, [pc, #296]	@ (8001230 <HAL_GPIO_Init+0x2f4>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d00d      	beq.n	8001128 <HAL_GPIO_Init+0x1ec>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a49      	ldr	r2, [pc, #292]	@ (8001234 <HAL_GPIO_Init+0x2f8>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d007      	beq.n	8001124 <HAL_GPIO_Init+0x1e8>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a48      	ldr	r2, [pc, #288]	@ (8001238 <HAL_GPIO_Init+0x2fc>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d101      	bne.n	8001120 <HAL_GPIO_Init+0x1e4>
 800111c:	2305      	movs	r3, #5
 800111e:	e00a      	b.n	8001136 <HAL_GPIO_Init+0x1fa>
 8001120:	2306      	movs	r3, #6
 8001122:	e008      	b.n	8001136 <HAL_GPIO_Init+0x1fa>
 8001124:	2304      	movs	r3, #4
 8001126:	e006      	b.n	8001136 <HAL_GPIO_Init+0x1fa>
 8001128:	2303      	movs	r3, #3
 800112a:	e004      	b.n	8001136 <HAL_GPIO_Init+0x1fa>
 800112c:	2302      	movs	r3, #2
 800112e:	e002      	b.n	8001136 <HAL_GPIO_Init+0x1fa>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <HAL_GPIO_Init+0x1fa>
 8001134:	2300      	movs	r3, #0
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	f002 0203 	and.w	r2, r2, #3
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	4093      	lsls	r3, r2
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001146:	4937      	ldr	r1, [pc, #220]	@ (8001224 <HAL_GPIO_Init+0x2e8>)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001154:	4b39      	ldr	r3, [pc, #228]	@ (800123c <HAL_GPIO_Init+0x300>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001178:	4a30      	ldr	r2, [pc, #192]	@ (800123c <HAL_GPIO_Init+0x300>)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800117e:	4b2f      	ldr	r3, [pc, #188]	@ (800123c <HAL_GPIO_Init+0x300>)
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011a2:	4a26      	ldr	r2, [pc, #152]	@ (800123c <HAL_GPIO_Init+0x300>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011a8:	4b24      	ldr	r3, [pc, #144]	@ (800123c <HAL_GPIO_Init+0x300>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011cc:	4a1b      	ldr	r2, [pc, #108]	@ (800123c <HAL_GPIO_Init+0x300>)
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011d2:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <HAL_GPIO_Init+0x300>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011f6:	4a11      	ldr	r2, [pc, #68]	@ (800123c <HAL_GPIO_Init+0x300>)
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3301      	adds	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	fa22 f303 	lsr.w	r3, r2, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	f47f ae9d 	bne.w	8000f4c <HAL_GPIO_Init+0x10>
  }
}
 8001212:	bf00      	nop
 8001214:	bf00      	nop
 8001216:	371c      	adds	r7, #28
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	40021000 	.word	0x40021000
 8001224:	40010000 	.word	0x40010000
 8001228:	48000400 	.word	0x48000400
 800122c:	48000800 	.word	0x48000800
 8001230:	48000c00 	.word	0x48000c00
 8001234:	48001000 	.word	0x48001000
 8001238:	48001400 	.word	0x48001400
 800123c:	40010400 	.word	0x40010400

08001240 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d141      	bne.n	80012d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800124e:	4b4b      	ldr	r3, [pc, #300]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800125a:	d131      	bne.n	80012c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800125c:	4b47      	ldr	r3, [pc, #284]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001262:	4a46      	ldr	r2, [pc, #280]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001268:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800126c:	4b43      	ldr	r3, [pc, #268]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001274:	4a41      	ldr	r2, [pc, #260]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800127a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800127c:	4b40      	ldr	r3, [pc, #256]	@ (8001380 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2232      	movs	r2, #50	@ 0x32
 8001282:	fb02 f303 	mul.w	r3, r2, r3
 8001286:	4a3f      	ldr	r2, [pc, #252]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001288:	fba2 2303 	umull	r2, r3, r2, r3
 800128c:	0c9b      	lsrs	r3, r3, #18
 800128e:	3301      	adds	r3, #1
 8001290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001292:	e002      	b.n	800129a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3b01      	subs	r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800129a:	4b38      	ldr	r3, [pc, #224]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012a6:	d102      	bne.n	80012ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f2      	bne.n	8001294 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ae:	4b33      	ldr	r3, [pc, #204]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ba:	d158      	bne.n	800136e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e057      	b.n	8001370 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012c0:	4b2e      	ldr	r3, [pc, #184]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012c6:	4a2d      	ldr	r2, [pc, #180]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80012d0:	e04d      	b.n	800136e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012d8:	d141      	bne.n	800135e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012da:	4b28      	ldr	r3, [pc, #160]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012e6:	d131      	bne.n	800134c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012e8:	4b24      	ldr	r3, [pc, #144]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012ee:	4a23      	ldr	r2, [pc, #140]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f8:	4b20      	ldr	r3, [pc, #128]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001300:	4a1e      	ldr	r2, [pc, #120]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001302:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001306:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001308:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2232      	movs	r2, #50	@ 0x32
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	4a1c      	ldr	r2, [pc, #112]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001314:	fba2 2303 	umull	r2, r3, r2, r3
 8001318:	0c9b      	lsrs	r3, r3, #18
 800131a:	3301      	adds	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800131e:	e002      	b.n	8001326 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3b01      	subs	r3, #1
 8001324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001326:	4b15      	ldr	r3, [pc, #84]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800132e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001332:	d102      	bne.n	800133a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f2      	bne.n	8001320 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001346:	d112      	bne.n	800136e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e011      	b.n	8001370 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800134c:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001358:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800135c:	e007      	b.n	800136e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800135e:	4b07      	ldr	r3, [pc, #28]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001366:	4a05      	ldr	r2, [pc, #20]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001368:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800136c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	40007000 	.word	0x40007000
 8001380:	20000000 	.word	0x20000000
 8001384:	431bde83 	.word	0x431bde83

08001388 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001392:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001396:	6093      	str	r3, [r2, #8]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40007000 	.word	0x40007000

080013a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e2fe      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d075      	beq.n	80014b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c6:	4b97      	ldr	r3, [pc, #604]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013d0:	4b94      	ldr	r3, [pc, #592]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b0c      	cmp	r3, #12
 80013de:	d102      	bne.n	80013e6 <HAL_RCC_OscConfig+0x3e>
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d002      	beq.n	80013ec <HAL_RCC_OscConfig+0x44>
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d10b      	bne.n	8001404 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	4b8d      	ldr	r3, [pc, #564]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d05b      	beq.n	80014b0 <HAL_RCC_OscConfig+0x108>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d157      	bne.n	80014b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e2d9      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800140c:	d106      	bne.n	800141c <HAL_RCC_OscConfig+0x74>
 800140e:	4b85      	ldr	r3, [pc, #532]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a84      	ldr	r2, [pc, #528]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e01d      	b.n	8001458 <HAL_RCC_OscConfig+0xb0>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x98>
 8001426:	4b7f      	ldr	r3, [pc, #508]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a7e      	ldr	r2, [pc, #504]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b7c      	ldr	r3, [pc, #496]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a7b      	ldr	r2, [pc, #492]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0xb0>
 8001440:	4b78      	ldr	r3, [pc, #480]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a77      	ldr	r2, [pc, #476]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b75      	ldr	r3, [pc, #468]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a74      	ldr	r2, [pc, #464]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d013      	beq.n	8001488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff f8f8 	bl	8000654 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff f8f4 	bl	8000654 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	@ 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e29e      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800147a:	4b6a      	ldr	r3, [pc, #424]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0xc0>
 8001486:	e014      	b.n	80014b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff f8e4 	bl	8000654 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff f8e0 	bl	8000654 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	@ 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e28a      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014a2:	4b60      	ldr	r3, [pc, #384]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0xe8>
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d075      	beq.n	80015aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014be:	4b59      	ldr	r3, [pc, #356]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014c8:	4b56      	ldr	r3, [pc, #344]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	2b0c      	cmp	r3, #12
 80014d6:	d102      	bne.n	80014de <HAL_RCC_OscConfig+0x136>
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d002      	beq.n	80014e4 <HAL_RCC_OscConfig+0x13c>
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d11f      	bne.n	8001524 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e4:	4b4f      	ldr	r3, [pc, #316]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_OscConfig+0x154>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e25d      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fc:	4b49      	ldr	r3, [pc, #292]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	061b      	lsls	r3, r3, #24
 800150a:	4946      	ldr	r1, [pc, #280]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001510:	4b45      	ldr	r3, [pc, #276]	@ (8001628 <HAL_RCC_OscConfig+0x280>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f851 	bl	80005bc <HAL_InitTick>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d043      	beq.n	80015a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e249      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d023      	beq.n	8001574 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152c:	4b3d      	ldr	r3, [pc, #244]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a3c      	ldr	r2, [pc, #240]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff f88c 	bl	8000654 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001540:	f7ff f888 	bl	8000654 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e232      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001552:	4b34      	ldr	r3, [pc, #208]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155e:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	061b      	lsls	r3, r3, #24
 800156c:	492d      	ldr	r1, [pc, #180]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 800156e:	4313      	orrs	r3, r2
 8001570:	604b      	str	r3, [r1, #4]
 8001572:	e01a      	b.n	80015aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001574:	4b2b      	ldr	r3, [pc, #172]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a2a      	ldr	r2, [pc, #168]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 800157a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800157e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff f868 	bl	8000654 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001588:	f7ff f864 	bl	8000654 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e20e      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800159a:	4b22      	ldr	r3, [pc, #136]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x1e0>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d041      	beq.n	800163a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d01c      	beq.n	80015f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015be:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80015c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015c4:	4a17      	ldr	r2, [pc, #92]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ce:	f7ff f841 	bl	8000654 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff f83d 	bl	8000654 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1e7      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80015ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0ef      	beq.n	80015d6 <HAL_RCC_OscConfig+0x22e>
 80015f6:	e020      	b.n	800163a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80015fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015fe:	4a09      	ldr	r2, [pc, #36]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001608:	f7ff f824 	bl	8000654 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800160e:	e00d      	b.n	800162c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001610:	f7ff f820 	bl	8000654 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d906      	bls.n	800162c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1ca      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000
 8001628:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800162c:	4b8c      	ldr	r3, [pc, #560]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 800162e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1ea      	bne.n	8001610 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 80a6 	beq.w	8001794 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800164c:	4b84      	ldr	r3, [pc, #528]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 800164e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_RCC_OscConfig+0x2b4>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x2b6>
 800165c:	2300      	movs	r3, #0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00d      	beq.n	800167e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b7f      	ldr	r3, [pc, #508]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001666:	4a7e      	ldr	r2, [pc, #504]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166c:	6593      	str	r3, [r2, #88]	@ 0x58
 800166e:	4b7c      	ldr	r3, [pc, #496]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800167a:	2301      	movs	r3, #1
 800167c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800167e:	4b79      	ldr	r3, [pc, #484]	@ (8001864 <HAL_RCC_OscConfig+0x4bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001686:	2b00      	cmp	r3, #0
 8001688:	d118      	bne.n	80016bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800168a:	4b76      	ldr	r3, [pc, #472]	@ (8001864 <HAL_RCC_OscConfig+0x4bc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a75      	ldr	r2, [pc, #468]	@ (8001864 <HAL_RCC_OscConfig+0x4bc>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001696:	f7fe ffdd 	bl	8000654 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169e:	f7fe ffd9 	bl	8000654 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e183      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b0:	4b6c      	ldr	r3, [pc, #432]	@ (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d108      	bne.n	80016d6 <HAL_RCC_OscConfig+0x32e>
 80016c4:	4b66      	ldr	r3, [pc, #408]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80016c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ca:	4a65      	ldr	r2, [pc, #404]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016d4:	e024      	b.n	8001720 <HAL_RCC_OscConfig+0x378>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d110      	bne.n	8001700 <HAL_RCC_OscConfig+0x358>
 80016de:	4b60      	ldr	r3, [pc, #384]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80016e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e4:	4a5e      	ldr	r2, [pc, #376]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80016f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f4:	4a5a      	ldr	r2, [pc, #360]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016fe:	e00f      	b.n	8001720 <HAL_RCC_OscConfig+0x378>
 8001700:	4b57      	ldr	r3, [pc, #348]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001706:	4a56      	ldr	r2, [pc, #344]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001710:	4b53      	ldr	r3, [pc, #332]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001716:	4a52      	ldr	r2, [pc, #328]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d016      	beq.n	8001756 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7fe ff94 	bl	8000654 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f7fe ff90 	bl	8000654 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e138      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001746:	4b46      	ldr	r3, [pc, #280]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0ed      	beq.n	8001730 <HAL_RCC_OscConfig+0x388>
 8001754:	e015      	b.n	8001782 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001756:	f7fe ff7d 	bl	8000654 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7fe ff79 	bl	8000654 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e121      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001774:	4b3a      	ldr	r3, [pc, #232]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1ed      	bne.n	800175e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001782:	7ffb      	ldrb	r3, [r7, #31]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001788:	4b35      	ldr	r3, [pc, #212]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178c:	4a34      	ldr	r2, [pc, #208]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 800178e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001792:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0320 	and.w	r3, r3, #32
 800179c:	2b00      	cmp	r3, #0
 800179e:	d03c      	beq.n	800181a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d01c      	beq.n	80017e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80017aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017ae:	4a2c      	ldr	r2, [pc, #176]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b8:	f7fe ff4c 	bl	8000654 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017c0:	f7fe ff48 	bl	8000654 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e0f2      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017d2:	4b23      	ldr	r3, [pc, #140]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80017d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0ef      	beq.n	80017c0 <HAL_RCC_OscConfig+0x418>
 80017e0:	e01b      	b.n	800181a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80017e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80017ea:	f023 0301 	bic.w	r3, r3, #1
 80017ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f2:	f7fe ff2f 	bl	8000654 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017fa:	f7fe ff2b 	bl	8000654 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e0d5      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800180c:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 800180e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1ef      	bne.n	80017fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 80c9 	beq.w	80019b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001824:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b0c      	cmp	r3, #12
 800182e:	f000 8083 	beq.w	8001938 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d15e      	bne.n	80018f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a08      	ldr	r2, [pc, #32]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001840:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7fe ff05 	bl	8000654 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184c:	e00c      	b.n	8001868 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184e:	f7fe ff01 	bl	8000654 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d905      	bls.n	8001868 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e0ab      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
 8001860:	40021000 	.word	0x40021000
 8001864:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001868:	4b55      	ldr	r3, [pc, #340]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ec      	bne.n	800184e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001874:	4b52      	ldr	r3, [pc, #328]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	4b52      	ldr	r3, [pc, #328]	@ (80019c4 <HAL_RCC_OscConfig+0x61c>)
 800187a:	4013      	ands	r3, r2
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6a11      	ldr	r1, [r2, #32]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001884:	3a01      	subs	r2, #1
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	4311      	orrs	r1, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800188e:	0212      	lsls	r2, r2, #8
 8001890:	4311      	orrs	r1, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001896:	0852      	lsrs	r2, r2, #1
 8001898:	3a01      	subs	r2, #1
 800189a:	0552      	lsls	r2, r2, #21
 800189c:	4311      	orrs	r1, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018a2:	0852      	lsrs	r2, r2, #1
 80018a4:	3a01      	subs	r2, #1
 80018a6:	0652      	lsls	r2, r2, #25
 80018a8:	4311      	orrs	r1, r2
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80018ae:	06d2      	lsls	r2, r2, #27
 80018b0:	430a      	orrs	r2, r1
 80018b2:	4943      	ldr	r1, [pc, #268]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b8:	4b41      	ldr	r3, [pc, #260]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a40      	ldr	r2, [pc, #256]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 80018be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018c4:	4b3e      	ldr	r3, [pc, #248]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4a3d      	ldr	r2, [pc, #244]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 80018ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7fe fec0 	bl	8000654 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d8:	f7fe febc 	bl	8000654 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e066      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ea:	4b35      	ldr	r3, [pc, #212]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x530>
 80018f6:	e05e      	b.n	80019b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f8:	4b31      	ldr	r3, [pc, #196]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a30      	ldr	r2, [pc, #192]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 80018fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7fe fea6 	bl	8000654 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190c:	f7fe fea2 	bl	8000654 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e04c      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191e:	4b28      	ldr	r3, [pc, #160]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800192a:	4b25      	ldr	r3, [pc, #148]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	4924      	ldr	r1, [pc, #144]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 8001930:	4b25      	ldr	r3, [pc, #148]	@ (80019c8 <HAL_RCC_OscConfig+0x620>)
 8001932:	4013      	ands	r3, r2
 8001934:	60cb      	str	r3, [r1, #12]
 8001936:	e03e      	b.n	80019b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e039      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001944:	4b1e      	ldr	r3, [pc, #120]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0203 	and.w	r2, r3, #3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	429a      	cmp	r2, r3
 8001956:	d12c      	bne.n	80019b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	3b01      	subs	r3, #1
 8001964:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d123      	bne.n	80019b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001974:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d11b      	bne.n	80019b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001984:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d113      	bne.n	80019b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	3b01      	subs	r3, #1
 8001998:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d109      	bne.n	80019b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a8:	085b      	lsrs	r3, r3, #1
 80019aa:	3b01      	subs	r3, #1
 80019ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000
 80019c4:	019f800c 	.word	0x019f800c
 80019c8:	feeefffc 	.word	0xfeeefffc

080019cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e11e      	b.n	8001c22 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e4:	4b91      	ldr	r3, [pc, #580]	@ (8001c2c <HAL_RCC_ClockConfig+0x260>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d910      	bls.n	8001a14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b8e      	ldr	r3, [pc, #568]	@ (8001c2c <HAL_RCC_ClockConfig+0x260>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 020f 	bic.w	r2, r3, #15
 80019fa:	498c      	ldr	r1, [pc, #560]	@ (8001c2c <HAL_RCC_ClockConfig+0x260>)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b8a      	ldr	r3, [pc, #552]	@ (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e106      	b.n	8001c22 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d073      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d129      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a28:	4b81      	ldr	r3, [pc, #516]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0f4      	b.n	8001c22 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a38:	f000 f966 	bl	8001d08 <RCC_GetSysClockFreqFromPLLSource>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4a7c      	ldr	r2, [pc, #496]	@ (8001c34 <HAL_RCC_ClockConfig+0x268>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d93f      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a46:	4b7a      	ldr	r3, [pc, #488]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d033      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d12f      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a66:	4b72      	ldr	r3, [pc, #456]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a6e:	4a70      	ldr	r2, [pc, #448]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a76:	2380      	movs	r3, #128	@ 0x80
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e024      	b.n	8001ac6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a84:	4b6a      	ldr	r3, [pc, #424]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0c6      	b.n	8001c22 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a94:	4b66      	ldr	r3, [pc, #408]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0be      	b.n	8001c22 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001aa4:	f000 f8ce 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4a61      	ldr	r2, [pc, #388]	@ (8001c34 <HAL_RCC_ClockConfig+0x268>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d909      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ab2:	4b5f      	ldr	r3, [pc, #380]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001aba:	4a5d      	ldr	r2, [pc, #372]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ac0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ac2:	2380      	movs	r3, #128	@ 0x80
 8001ac4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ac6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 0203 	bic.w	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4957      	ldr	r1, [pc, #348]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad8:	f7fe fdbc 	bl	8000654 <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae0:	f7fe fdb8 	bl	8000654 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e095      	b.n	8001c22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	4b4e      	ldr	r3, [pc, #312]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 020c 	and.w	r2, r3, #12
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d1eb      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d023      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b20:	4b43      	ldr	r3, [pc, #268]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4a42      	ldr	r2, [pc, #264]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001b26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b38:	4b3d      	ldr	r3, [pc, #244]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001b40:	4a3b      	ldr	r2, [pc, #236]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001b42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b48:	4b39      	ldr	r3, [pc, #228]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4936      	ldr	r1, [pc, #216]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	2b80      	cmp	r3, #128	@ 0x80
 8001b60:	d105      	bne.n	8001b6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b62:	4b33      	ldr	r3, [pc, #204]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	4a32      	ldr	r2, [pc, #200]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001b68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d21d      	bcs.n	8001bb8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f023 020f 	bic.w	r2, r3, #15
 8001b84:	4929      	ldr	r1, [pc, #164]	@ (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b8c:	f7fe fd62 	bl	8000654 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b94:	f7fe fd5e 	bl	8000654 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e03b      	b.n	8001c22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d1ed      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4917      	ldr	r1, [pc, #92]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d009      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be2:	4b13      	ldr	r3, [pc, #76]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	490f      	ldr	r1, [pc, #60]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bf6:	f000 f825 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	490c      	ldr	r1, [pc, #48]	@ (8001c38 <HAL_RCC_ClockConfig+0x26c>)
 8001c08:	5ccb      	ldrb	r3, [r1, r3]
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c12:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <HAL_RCC_ClockConfig+0x270>)
 8001c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c16:	4b0a      	ldr	r3, [pc, #40]	@ (8001c40 <HAL_RCC_ClockConfig+0x274>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fcce 	bl	80005bc <HAL_InitTick>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40022000 	.word	0x40022000
 8001c30:	40021000 	.word	0x40021000
 8001c34:	04c4b400 	.word	0x04c4b400
 8001c38:	080021e4 	.word	0x080021e4
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d102      	bne.n	8001c5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c56:	4b2a      	ldr	r3, [pc, #168]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	e047      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c5c:	4b27      	ldr	r3, [pc, #156]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d102      	bne.n	8001c6e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c68:	4b26      	ldr	r3, [pc, #152]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	e03e      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c6e:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d136      	bne.n	8001ce8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c7a:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c84:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d10c      	bne.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c98:	4a1a      	ldr	r2, [pc, #104]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca0:	4a16      	ldr	r2, [pc, #88]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca2:	68d2      	ldr	r2, [r2, #12]
 8001ca4:	0a12      	lsrs	r2, r2, #8
 8001ca6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	617b      	str	r3, [r7, #20]
      break;
 8001cb0:	e00c      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cb2:	4a13      	ldr	r2, [pc, #76]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cba:	4a10      	ldr	r2, [pc, #64]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cbc:	68d2      	ldr	r2, [r2, #12]
 8001cbe:	0a12      	lsrs	r2, r2, #8
 8001cc0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cc4:	fb02 f303 	mul.w	r3, r2, r3
 8001cc8:	617b      	str	r3, [r7, #20]
      break;
 8001cca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0e5b      	lsrs	r3, r3, #25
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	e001      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cec:	693b      	ldr	r3, [r7, #16]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	00f42400 	.word	0x00f42400
 8001d04:	007a1200 	.word	0x007a1200

08001d08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d18:	4b1b      	ldr	r3, [pc, #108]	@ (8001d88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	3301      	adds	r3, #1
 8001d24:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d10c      	bne.n	8001d46 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d2c:	4a17      	ldr	r2, [pc, #92]	@ (8001d8c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d34:	4a14      	ldr	r2, [pc, #80]	@ (8001d88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d36:	68d2      	ldr	r2, [r2, #12]
 8001d38:	0a12      	lsrs	r2, r2, #8
 8001d3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	617b      	str	r3, [r7, #20]
    break;
 8001d44:	e00c      	b.n	8001d60 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d46:	4a12      	ldr	r2, [pc, #72]	@ (8001d90 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d50:	68d2      	ldr	r2, [r2, #12]
 8001d52:	0a12      	lsrs	r2, r2, #8
 8001d54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d58:	fb02 f303 	mul.w	r3, r2, r3
 8001d5c:	617b      	str	r3, [r7, #20]
    break;
 8001d5e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d60:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	0e5b      	lsrs	r3, r3, #25
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d78:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d7a:	687b      	ldr	r3, [r7, #4]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	007a1200 	.word	0x007a1200
 8001d90:	00f42400 	.word	0x00f42400

08001d94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001da0:	2300      	movs	r3, #0
 8001da2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 8098 	beq.w	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db6:	4b43      	ldr	r3, [pc, #268]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10d      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	4b40      	ldr	r3, [pc, #256]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dce:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dde:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a39      	ldr	r2, [pc, #228]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dea:	f7fe fc33 	bl	8000654 <HAL_GetTick>
 8001dee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001df0:	e009      	b.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df2:	f7fe fc2f 	bl	8000654 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d902      	bls.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	74fb      	strb	r3, [r7, #19]
        break;
 8001e04:	e005      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e06:	4b30      	ldr	r3, [pc, #192]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0ef      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e12:	7cfb      	ldrb	r3, [r7, #19]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d159      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e18:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e22:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d01e      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d019      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e34:	4b23      	ldr	r3, [pc, #140]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e40:	4b20      	ldr	r3, [pc, #128]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e46:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e50:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e56:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e60:	4a18      	ldr	r2, [pc, #96]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d016      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e72:	f7fe fbef 	bl	8000654 <HAL_GetTick>
 8001e76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e78:	e00b      	b.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f7fe fbeb 	bl	8000654 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d902      	bls.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	74fb      	strb	r3, [r7, #19]
            break;
 8001e90:	e006      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0ec      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001ea0:	7cfb      	ldrb	r3, [r7, #19]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10b      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ea6:	4b07      	ldr	r3, [pc, #28]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	4903      	ldr	r1, [pc, #12]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ebe:	7cfb      	ldrb	r3, [r7, #19]
 8001ec0:	74bb      	strb	r3, [r7, #18]
 8001ec2:	e005      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ecc:	7cfb      	ldrb	r3, [r7, #19]
 8001ece:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed0:	7c7b      	ldrb	r3, [r7, #17]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d105      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed6:	4ba6      	ldr	r3, [pc, #664]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	4aa5      	ldr	r2, [pc, #660]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001edc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ee0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00a      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eee:	4ba0      	ldr	r3, [pc, #640]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef4:	f023 0203 	bic.w	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	499c      	ldr	r1, [pc, #624]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00a      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f10:	4b97      	ldr	r3, [pc, #604]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f16:	f023 020c 	bic.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	4994      	ldr	r1, [pc, #592]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f32:	4b8f      	ldr	r3, [pc, #572]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f38:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	498b      	ldr	r1, [pc, #556]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00a      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f54:	4b86      	ldr	r3, [pc, #536]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	4983      	ldr	r1, [pc, #524]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00a      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f76:	4b7e      	ldr	r3, [pc, #504]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f7c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	497a      	ldr	r1, [pc, #488]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f98:	4b75      	ldr	r3, [pc, #468]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f9e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	4972      	ldr	r1, [pc, #456]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fba:	4b6d      	ldr	r3, [pc, #436]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	4969      	ldr	r1, [pc, #420]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fdc:	4b64      	ldr	r3, [pc, #400]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4961      	ldr	r1, [pc, #388]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ffe:	4b5c      	ldr	r3, [pc, #368]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002004:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200c:	4958      	ldr	r1, [pc, #352]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002020:	4b53      	ldr	r3, [pc, #332]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002026:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202e:	4950      	ldr	r1, [pc, #320]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800203e:	d105      	bne.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002040:	4b4b      	ldr	r3, [pc, #300]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a4a      	ldr	r2, [pc, #296]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800204a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002054:	2b00      	cmp	r3, #0
 8002056:	d015      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002058:	4b45      	ldr	r3, [pc, #276]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002066:	4942      	ldr	r1, [pc, #264]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002072:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002076:	d105      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002078:	4b3d      	ldr	r3, [pc, #244]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a3c      	ldr	r2, [pc, #240]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002082:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d015      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002090:	4b37      	ldr	r3, [pc, #220]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002096:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	4934      	ldr	r1, [pc, #208]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020ae:	d105      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d015      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020c8:	4b29      	ldr	r3, [pc, #164]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d6:	4926      	ldr	r1, [pc, #152]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020e6:	d105      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e8:	4b21      	ldr	r3, [pc, #132]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4a20      	ldr	r2, [pc, #128]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d015      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002100:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002106:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800210e:	4918      	ldr	r1, [pc, #96]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800211a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800211e:	d105      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002120:	4b13      	ldr	r3, [pc, #76]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4a12      	ldr	r2, [pc, #72]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800212a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d015      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002138:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002146:	490a      	ldr	r1, [pc, #40]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002152:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002156:	d105      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002158:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a04      	ldr	r2, [pc, #16]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002162:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002164:	7cbb      	ldrb	r3, [r7, #18]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000

08002174 <memset>:
 8002174:	4402      	add	r2, r0
 8002176:	4603      	mov	r3, r0
 8002178:	4293      	cmp	r3, r2
 800217a:	d100      	bne.n	800217e <memset+0xa>
 800217c:	4770      	bx	lr
 800217e:	f803 1b01 	strb.w	r1, [r3], #1
 8002182:	e7f9      	b.n	8002178 <memset+0x4>

08002184 <__libc_init_array>:
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	4d0d      	ldr	r5, [pc, #52]	@ (80021bc <__libc_init_array+0x38>)
 8002188:	4c0d      	ldr	r4, [pc, #52]	@ (80021c0 <__libc_init_array+0x3c>)
 800218a:	1b64      	subs	r4, r4, r5
 800218c:	10a4      	asrs	r4, r4, #2
 800218e:	2600      	movs	r6, #0
 8002190:	42a6      	cmp	r6, r4
 8002192:	d109      	bne.n	80021a8 <__libc_init_array+0x24>
 8002194:	4d0b      	ldr	r5, [pc, #44]	@ (80021c4 <__libc_init_array+0x40>)
 8002196:	4c0c      	ldr	r4, [pc, #48]	@ (80021c8 <__libc_init_array+0x44>)
 8002198:	f000 f818 	bl	80021cc <_init>
 800219c:	1b64      	subs	r4, r4, r5
 800219e:	10a4      	asrs	r4, r4, #2
 80021a0:	2600      	movs	r6, #0
 80021a2:	42a6      	cmp	r6, r4
 80021a4:	d105      	bne.n	80021b2 <__libc_init_array+0x2e>
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
 80021a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ac:	4798      	blx	r3
 80021ae:	3601      	adds	r6, #1
 80021b0:	e7ee      	b.n	8002190 <__libc_init_array+0xc>
 80021b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b6:	4798      	blx	r3
 80021b8:	3601      	adds	r6, #1
 80021ba:	e7f2      	b.n	80021a2 <__libc_init_array+0x1e>
 80021bc:	080021f4 	.word	0x080021f4
 80021c0:	080021f4 	.word	0x080021f4
 80021c4:	080021f4 	.word	0x080021f4
 80021c8:	080021f8 	.word	0x080021f8

080021cc <_init>:
 80021cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ce:	bf00      	nop
 80021d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d2:	bc08      	pop	{r3}
 80021d4:	469e      	mov	lr, r3
 80021d6:	4770      	bx	lr

080021d8 <_fini>:
 80021d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021da:	bf00      	nop
 80021dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021de:	bc08      	pop	{r3}
 80021e0:	469e      	mov	lr, r3
 80021e2:	4770      	bx	lr
